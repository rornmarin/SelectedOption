{"ast":null,"code":"var _jsxFileName = \"/home/marin/Documents/pro_reactnetive/filter-province/src/Pages/selectOption.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport provincesJson from './provinces.json';\nimport districtsjSON from './districts.json';\nimport communesJosn from './communes.json';\nimport villagesJson from './villages.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoExtractor = data => {\n  return Object.keys(data).map(key => {\n    return {\n      id: key,\n      name: data[key].name\n    };\n  });\n};\nconsole.log(communesJosn);\nconst provinceData = geoExtractor(provincesJson.provinces, 'provinces');\nconst districtsData = geoExtractor(districtsjSON.districts, 'districts');\n// const communesData = geoExtractor()\n\nconst SelectOption = () => {\n  _s();\n  const [provinces] = useState(provinceData);\n  const [districts, setDistricts] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState(null);\n  const handleProvinceSelect = provinceId => {\n    const province = provinces.find(obj => obj.id === provinceId);\n    setSelectedProvince(province);\n    setDistricts(districtsData.filter(district => district.id.startsWith(provinceId)));\n  };\n  const handleDistrictSelect = districtId => {\n    const selected = districtsjSON.districts[districtId];\n    setSelectedDistrict(selected);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Province:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => handleProvinceSelect(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a province\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), provinces.map(province => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: province.id,\n        children: [province.name.latin, \" / \", province.name.km]\n      }, province.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"District:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => handleDistrictSelect(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a district\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), districts.map(district => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: district.id,\n        children: [district.name.latin, \" / \", district.name.km]\n      }, district.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), selectedProvince && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your selected option is:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Province: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), selectedProvince.name.latin, \" (\", selectedProvince.name.km, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(SelectOption, \"XmiJaKO/7fBODeU2FY0Tn56mKC8=\");\n_c = SelectOption;\nexport default SelectOption;\n\n// import React, { useState } from 'react';\n// import provincesJson from './provinces.json';\n\n// const SelectOption = () => {\n//   const [selectedProvince, setSelectedProvince] = useState(null);\n\n//   const handleProvinceSelect = (provinceId) => {\n//     const selected = provincesJson.provinces[provinceId];\n//     setSelectedProvince(selected);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Province</h2>\n//       <select onChange={(e) => handleProvinceSelect(e.target.value)}>\n//         <option value=\"\">Select a Province</option>\n//         {Object.keys(provincesJson.provinces).map((provinceId) => (\n//           <option key={provinceId} value={provinceId}>\n//             {provincesJson.provinces[provinceId].name.km}\n//           </option>\n//         ))}\n//       </select>\n\n//       {selectedProvince && (\n//         <div>\n//           <h2>Selected Province</h2>\n//           <p>\n//             <strong>Name:</strong> {selectedProvince.name.km} ({selectedProvince.name.latin})\n//           </p>\n//           <p>\n//             <strong>Administrative Unit:</strong>{' '}\n//             {selectedProvince.administrative_unit.km} ({selectedProvince.administrative_unit.latin})\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SelectOption;\nvar _c;\n$RefreshReg$(_c, \"SelectOption\");","map":{"version":3,"names":["React","useState","provincesJson","districtsjSON","communesJosn","villagesJson","jsxDEV","_jsxDEV","geoExtractor","data","Object","keys","map","key","id","name","console","log","provinceData","provinces","districtsData","districts","SelectOption","_s","setDistricts","selectedProvince","setSelectedProvince","selectedDistrict","setSelectedDistrict","handleProvinceSelect","provinceId","province","find","obj","filter","district","startsWith","handleDistrictSelect","districtId","selected","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","latin","km","_c","$RefreshReg$"],"sources":["/home/marin/Documents/pro_reactnetive/filter-province/src/Pages/selectOption.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport provincesJson from './provinces.json';\nimport districtsjSON from './districts.json';\nimport communesJosn from './communes.json';\nimport villagesJson from './villages.json';\n\nconst geoExtractor = (data) => {\n  return Object.keys(data).map(key => {\n    return {\n      id: key,\n      name: data[key].name \n    }\n  })\n}\nconsole.log(communesJosn);\n\nconst provinceData = geoExtractor(provincesJson.provinces, 'provinces')\nconst districtsData = geoExtractor(districtsjSON.districts, 'districts')\n// const communesData = geoExtractor()\n\nconst SelectOption = () => {\n\n  const [provinces] = useState(provinceData);\n  const [districts, setDistricts] = useState([]);\n  const [selectedProvince, setSelectedProvince] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState(null);\n\n  const handleProvinceSelect = (provinceId) => {\n    const province = provinces.find(obj => obj.id === provinceId)\n    setSelectedProvince(province);\n    setDistricts(districtsData.filter(district => district.id.startsWith(provinceId)))\n  };\n\n  const handleDistrictSelect = (districtId) => {\n    const selected = districtsjSON.districts[districtId];\n    setSelectedDistrict(selected);\n  };\n\n  return (\n    <div>\n      <h2>Province:</h2>\n      <select onChange={(e) => handleProvinceSelect(e.target.value)}>\n        <option value=\"\">Select a province</option>\n        {provinces.map((province) => (\n          <option key={province.id} value={province.id}>\n            {province.name.latin} / {province.name.km}\n          </option>\n        ))}\n      </select>\n\n      <h2>District:</h2>\n      <select onChange={(e) => handleDistrictSelect(e.target.value)}>\n        <option value=\"\">Select a district</option>\n        {districts.map((district) => (\n          <option key={district.id} value={district.id}>\n            {district.name.latin} / {district.name.km}\n          </option>\n        ))}\n      </select>\n\n      {selectedProvince && (\n        <div>\n          <h2>Your selected option is:</h2>\n          <p>\n            <strong>Province: </strong>\n            {selectedProvince.name.latin} ({selectedProvince.name.km})\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectOption;\n\n\n\n\n// import React, { useState } from 'react';\n// import provincesJson from './provinces.json';\n\n// const SelectOption = () => {\n//   const [selectedProvince, setSelectedProvince] = useState(null);\n\n//   const handleProvinceSelect = (provinceId) => {\n//     const selected = provincesJson.provinces[provinceId];\n//     setSelectedProvince(selected);\n//   };\n\n//   return (\n//     <div>\n//       <h2>Province</h2>\n//       <select onChange={(e) => handleProvinceSelect(e.target.value)}>\n//         <option value=\"\">Select a Province</option>\n//         {Object.keys(provincesJson.provinces).map((provinceId) => (\n//           <option key={provinceId} value={provinceId}>\n//             {provincesJson.provinces[provinceId].name.km}\n//           </option>\n//         ))}\n//       </select>\n\n//       {selectedProvince && (\n//         <div>\n//           <h2>Selected Province</h2>\n//           <p>\n//             <strong>Name:</strong> {selectedProvince.name.km} ({selectedProvince.name.latin})\n//           </p>\n//           <p>\n//             <strong>Administrative Unit:</strong>{' '}\n//             {selectedProvince.administrative_unit.km} ({selectedProvince.administrative_unit.latin})\n//           </p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default SelectOption;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}